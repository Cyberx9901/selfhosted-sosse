# Generated by Django 3.2.12 on 2022-10-04 21:23

import datetime
from django.conf import settings
import django.contrib.postgres.indexes
import django.contrib.postgres.search
from django.db import migrations, models
import django.db.models.deletion
import se.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CrawlerStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('t', models.DateTimeField()),
                ('doc_count', models.PositiveIntegerField()),
                ('queued_url', models.PositiveIntegerField()),
                ('indexing_speed', models.PositiveIntegerField(blank=True, null=True)),
                ('freq', models.CharField(choices=[('M', 'M'), ('D', 'D')], max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='CrawlPolicy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url_regex', models.TextField(unique=True)),
                ('condition', models.CharField(choices=[('always', 'Crawl all pages'), ('depth', 'Depending on depth'), ('never', 'Never crawl')], default='always', max_length=6)),
                ('mimetype_regex', models.TextField(default='text/.*')),
                ('crawl_depth', models.PositiveIntegerField(default=0, help_text="Level of external links (links that don't match the regex) to recurse into")),
                ('keep_params', models.BooleanField(default=True, help_text='When disabled, URL parameters (parameters after "?") are removed from URLs, this can be useful if some parameters are random, change sorting or filtering, ...', verbose_name='Index URL parameters')),
                ('default_browse_mode', models.CharField(choices=[('detect', 'Detect'), ('selenium', 'Chromium'), ('requests', 'Python Requests')], default='detect', help_text="Python Request is faster, but can't execute Javascript and may break pages", max_length=8)),
                ('take_screenshots', models.BooleanField(default=False)),
                ('store_extern_links', models.BooleanField(default=False)),
                ('recrawl_mode', models.CharField(choices=[('none', 'Once'), ('constant', 'Constant time'), ('adaptive', 'Adaptive')], default='adaptive', help_text='Adaptive frequency will increase delay between two crawls when the page stays unchanged', max_length=8, verbose_name='Crawl frequency')),
                ('recrawl_dt_min', models.DurationField(blank=True, default=datetime.timedelta(seconds=60), help_text='Min. time before recrawling a page', null=True)),
                ('recrawl_dt_max', models.DurationField(blank=True, default=datetime.timedelta(days=365), help_text='Max. time before recrawling a page', null=True)),
                ('hash_mode', models.CharField(choices=[('raw', 'Hash raw content'), ('no_numbers', 'Normalize numbers before')], default='no_numbers', help_text='Page content hashing method used to detect changes in the content', max_length=10)),
                ('auth_login_url_re', models.TextField(blank=True, help_text='A redirection to this URL will trigger authentication', null=True, verbose_name='Login URL')),
                ('auth_form_selector', models.TextField(blank=True, help_text='CSS selector pointing to the authentication &lt;form&gt; element', null=True, verbose_name='Form selector')),
                ('auth_cookies', models.TextField(blank=True, default='', verbose_name='Authentication cookie')),
            ],
            options={
                'verbose_name_plural': 'crawl policies',
            },
        ),
        migrations.CreateModel(
            name='DomainSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('browse_mode', models.CharField(choices=[('detect', 'Detect'), ('selenium', 'Chromium'), ('requests', 'Python Requests')], default='detect', max_length=10)),
                ('domain', models.TextField(unique=True)),
                ('robots_status', models.CharField(choices=[('unknown', 'Unknown'), ('empty', 'Empty'), ('loaded', 'Loaded'), ('ignore', 'Ignore')], default='unknown', max_length=10)),
                ('robots_ua_hash', models.CharField(blank=True, default='', max_length=32)),
                ('robots_allow', models.TextField(blank=True, default='')),
                ('robots_disallow', models.TextField(blank=True, default='')),
            ],
        ),
        migrations.CreateModel(
            name='FavIcon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.TextField(unique=True)),
                ('content', models.BinaryField(blank=True, null=True)),
                ('mimetype', models.CharField(blank=True, max_length=64, null=True)),
                ('missing', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='SearchEngine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(blank=True, default='', max_length=32)),
                ('long_name', models.CharField(blank=True, default='', max_length=48)),
                ('description', models.CharField(blank=True, default='', max_length=1024)),
                ('html_template', models.CharField(max_length=2048)),
                ('shortcut', models.CharField(blank=True, max_length=16)),
            ],
        ),
        migrations.CreateModel(
            name='WorkerStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doc_processed', models.PositiveIntegerField()),
                ('worker_no', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='SearchHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.TextField()),
                ('querystring', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.TextField(unique=True)),
                ('normalized_url', models.TextField()),
                ('title', models.TextField()),
                ('normalized_title', models.TextField()),
                ('content', models.TextField()),
                ('normalized_content', models.TextField()),
                ('content_hash', models.TextField(blank=True, null=True)),
                ('vector', django.contrib.postgres.search.SearchVectorField(blank=True, null=True)),
                ('lang_iso_639_1', models.CharField(blank=True, max_length=6, null=True, verbose_name='Language')),
                ('vector_lang', se.models.RegConfigField(default='simple')),
                ('mimetype', models.CharField(blank=True, max_length=64, null=True)),
                ('robotstxt_rejected', models.BooleanField(default=False, verbose_name='Rejected by robots.txt')),
                ('redirect_url', models.TextField(blank=True, null=True)),
                ('screenshot_file', models.CharField(blank=True, max_length=4096, null=True)),
                ('screenshot_count', models.PositiveIntegerField(blank=True, null=True)),
                ('crawl_first', models.DateTimeField(blank=True, null=True, verbose_name='Crawled first')),
                ('crawl_last', models.DateTimeField(blank=True, null=True, verbose_name='Crawled last')),
                ('crawl_next', models.DateTimeField(blank=True, null=True, verbose_name='Crawl next')),
                ('crawl_dt', models.DurationField(blank=True, null=True, verbose_name='Crawl DT')),
                ('crawl_recurse', models.PositiveIntegerField(default=0, verbose_name='Recursion remaining')),
                ('error', models.TextField(blank=True, default='')),
                ('error_hash', models.TextField(blank=True, default='')),
                ('worker_no', models.PositiveIntegerField(blank=True, null=True)),
                ('favicon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='se.favicon')),
            ],
        ),
        migrations.CreateModel(
            name='AuthField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=256, verbose_name='<input> name attribute')),
                ('value', models.CharField(max_length=256)),
                ('crawl_policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='se.crawlpolicy')),
            ],
            options={
                'verbose_name': 'authentication field',
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True, null=True)),
                ('pos', models.PositiveIntegerField()),
                ('link_no', models.PositiveIntegerField()),
                ('extern_url', models.TextField(blank=True, null=True)),
                ('screen_pos', models.CharField(blank=True, max_length=64, null=True)),
                ('doc_from', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='links_to', to='se.document')),
                ('doc_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='linked_from', to='se.document')),
            ],
            options={
                'unique_together': {('doc_from', 'link_no')},
            },
        ),
        migrations.AddIndex(
            model_name='document',
            index=django.contrib.postgres.indexes.GinIndex(fields=['vector'], name='se_document_vector_efded7_gin'),
        ),
    ]
